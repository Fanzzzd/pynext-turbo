// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type {
  ReadHeroesHeroesGetData,
  ReadHeroesHeroesGetResponses,
  ReadHeroesHeroesGetErrors,
  CreateHeroHeroesPostData,
  CreateHeroHeroesPostResponses,
  CreateHeroHeroesPostErrors,
  DeleteHeroHeroesHeroIdDeleteData,
  DeleteHeroHeroesHeroIdDeleteResponses,
  DeleteHeroHeroesHeroIdDeleteErrors,
  ReadHeroHeroesHeroIdGetData,
  ReadHeroHeroesHeroIdGetResponses,
  ReadHeroHeroesHeroIdGetErrors,
  UpdateHeroHeroesHeroIdPatchData,
  UpdateHeroHeroesHeroIdPatchResponses,
  UpdateHeroHeroesHeroIdPatchErrors,
  ReadRootGetData,
  ReadRootGetResponses,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Read Heroes
 */
export const readHeroesHeroesGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadHeroesHeroesGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ReadHeroesHeroesGetResponses,
    ReadHeroesHeroesGetErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/heroes/',
    ...options,
  });
};

/**
 * Create Hero
 */
export const createHeroHeroesPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateHeroHeroesPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateHeroHeroesPostResponses,
    CreateHeroHeroesPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/heroes/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete Hero
 */
export const deleteHeroHeroesHeroIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteHeroHeroesHeroIdDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteHeroHeroesHeroIdDeleteResponses,
    DeleteHeroHeroesHeroIdDeleteErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/heroes/{hero_id}',
    ...options,
  });
};

/**
 * Read Hero
 */
export const readHeroHeroesHeroIdGet = <ThrowOnError extends boolean = false>(
  options: Options<ReadHeroHeroesHeroIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ReadHeroHeroesHeroIdGetResponses,
    ReadHeroHeroesHeroIdGetErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/heroes/{hero_id}',
    ...options,
  });
};

/**
 * Update Hero
 */
export const updateHeroHeroesHeroIdPatch = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateHeroHeroesHeroIdPatchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateHeroHeroesHeroIdPatchResponses,
    UpdateHeroHeroesHeroIdPatchErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/heroes/{hero_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadRootGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ReadRootGetResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/',
    ...options,
  });
};
