// This file is auto-generated by @hey-api/openapi-ts

/**
 * BearerResponse
 */
export type BearerResponse = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type: string;
};

/**
 * Body_auth_jwt_login_auth_jwt_login_post
 */
export type BodyAuthJwtLoginAuthJwtLoginPost = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * Body_reset_forgot_password_auth_forgot_password_post
 */
export type BodyResetForgotPasswordAuthForgotPasswordPost = {
    /**
     * Email
     */
    email: string;
};

/**
 * Body_reset_reset_password_auth_reset_password_post
 */
export type BodyResetResetPasswordAuthResetPasswordPost = {
    /**
     * Token
     */
    token: string;
    /**
     * Password
     */
    password: string;
};

/**
 * Body_verify_request_token_auth_request_verify_token_post
 */
export type BodyVerifyRequestTokenAuthRequestVerifyTokenPost = {
    /**
     * Email
     */
    email: string;
};

/**
 * Body_verify_verify_auth_verify_post
 */
export type BodyVerifyVerifyAuthVerifyPost = {
    /**
     * Token
     */
    token: string;
};

/**
 * ErrorModel
 */
export type ErrorModel = {
    /**
     * Detail
     */
    detail: string | {
        [key: string]: string;
    };
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * HeroCreate
 */
export type HeroCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Secret Name
     */
    secret_name: string;
    /**
     * Age
     */
    age?: number | null;
};

/**
 * HeroRead
 */
export type HeroRead = {
    /**
     * Name
     */
    name: string;
    /**
     * Secret Name
     */
    secret_name: string;
    /**
     * Age
     */
    age?: number | null;
    /**
     * Id
     */
    id: number;
};

/**
 * HeroUpdate
 */
export type HeroUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Secret Name
     */
    secret_name?: string | null;
    /**
     * Age
     */
    age?: number | null;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Is Superuser
     */
    is_superuser?: boolean | null;
    /**
     * Is Verified
     */
    is_verified?: boolean | null;
};

/**
 * UserRead
 */
export type UserRead = {
    /**
     * Id
     */
    id: number;
    /**
     * Email
     */
    email: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Is Verified
     */
    is_verified?: boolean;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
    /**
     * Password
     */
    password?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Is Superuser
     */
    is_superuser?: boolean | null;
    /**
     * Is Verified
     */
    is_verified?: boolean | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type AuthJwtLoginAuthJwtLoginPostData = {
    body: BodyAuthJwtLoginAuthJwtLoginPost;
    path?: never;
    query?: never;
    url: '/auth/jwt/login';
};

export type AuthJwtLoginAuthJwtLoginPostErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthJwtLoginAuthJwtLoginPostError = AuthJwtLoginAuthJwtLoginPostErrors[keyof AuthJwtLoginAuthJwtLoginPostErrors];

export type AuthJwtLoginAuthJwtLoginPostResponses = {
    /**
     * Successful Response
     */
    200: BearerResponse;
};

export type AuthJwtLoginAuthJwtLoginPostResponse = AuthJwtLoginAuthJwtLoginPostResponses[keyof AuthJwtLoginAuthJwtLoginPostResponses];

export type AuthJwtLogoutAuthJwtLogoutPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/jwt/logout';
};

export type AuthJwtLogoutAuthJwtLogoutPostErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
};

export type AuthJwtLogoutAuthJwtLogoutPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RegisterRegisterAuthRegisterPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterRegisterAuthRegisterPostErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterRegisterAuthRegisterPostError = RegisterRegisterAuthRegisterPostErrors[keyof RegisterRegisterAuthRegisterPostErrors];

export type RegisterRegisterAuthRegisterPostResponses = {
    /**
     * Successful Response
     */
    201: UserRead;
};

export type RegisterRegisterAuthRegisterPostResponse = RegisterRegisterAuthRegisterPostResponses[keyof RegisterRegisterAuthRegisterPostResponses];

export type ResetForgotPasswordAuthForgotPasswordPostData = {
    body: BodyResetForgotPasswordAuthForgotPasswordPost;
    path?: never;
    query?: never;
    url: '/auth/forgot-password';
};

export type ResetForgotPasswordAuthForgotPasswordPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResetForgotPasswordAuthForgotPasswordPostError = ResetForgotPasswordAuthForgotPasswordPostErrors[keyof ResetForgotPasswordAuthForgotPasswordPostErrors];

export type ResetForgotPasswordAuthForgotPasswordPostResponses = {
    /**
     * Successful Response
     */
    202: unknown;
};

export type ResetResetPasswordAuthResetPasswordPostData = {
    body: BodyResetResetPasswordAuthResetPasswordPost;
    path?: never;
    query?: never;
    url: '/auth/reset-password';
};

export type ResetResetPasswordAuthResetPasswordPostErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResetResetPasswordAuthResetPasswordPostError = ResetResetPasswordAuthResetPasswordPostErrors[keyof ResetResetPasswordAuthResetPasswordPostErrors];

export type ResetResetPasswordAuthResetPasswordPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VerifyRequestTokenAuthRequestVerifyTokenPostData = {
    body: BodyVerifyRequestTokenAuthRequestVerifyTokenPost;
    path?: never;
    query?: never;
    url: '/auth/request-verify-token';
};

export type VerifyRequestTokenAuthRequestVerifyTokenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VerifyRequestTokenAuthRequestVerifyTokenPostError = VerifyRequestTokenAuthRequestVerifyTokenPostErrors[keyof VerifyRequestTokenAuthRequestVerifyTokenPostErrors];

export type VerifyRequestTokenAuthRequestVerifyTokenPostResponses = {
    /**
     * Successful Response
     */
    202: unknown;
};

export type VerifyVerifyAuthVerifyPostData = {
    body: BodyVerifyVerifyAuthVerifyPost;
    path?: never;
    query?: never;
    url: '/auth/verify';
};

export type VerifyVerifyAuthVerifyPostErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VerifyVerifyAuthVerifyPostError = VerifyVerifyAuthVerifyPostErrors[keyof VerifyVerifyAuthVerifyPostErrors];

export type VerifyVerifyAuthVerifyPostResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type VerifyVerifyAuthVerifyPostResponse = VerifyVerifyAuthVerifyPostResponses[keyof VerifyVerifyAuthVerifyPostResponses];

export type UsersCurrentUserUsersMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersCurrentUserUsersMeGetErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
};

export type UsersCurrentUserUsersMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UsersCurrentUserUsersMeGetResponse = UsersCurrentUserUsersMeGetResponses[keyof UsersCurrentUserUsersMeGetResponses];

export type UsersPatchCurrentUserUsersMePatchData = {
    body: UserUpdate;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersPatchCurrentUserUsersMePatchErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Missing token or inactive user.
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersPatchCurrentUserUsersMePatchError = UsersPatchCurrentUserUsersMePatchErrors[keyof UsersPatchCurrentUserUsersMePatchErrors];

export type UsersPatchCurrentUserUsersMePatchResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UsersPatchCurrentUserUsersMePatchResponse = UsersPatchCurrentUserUsersMePatchResponses[keyof UsersPatchCurrentUserUsersMePatchResponses];

export type UsersDeleteUserUsersIdDeleteData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersDeleteUserUsersIdDeleteErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
    /**
     * Not a superuser.
     */
    403: unknown;
    /**
     * The user does not exist.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersDeleteUserUsersIdDeleteError = UsersDeleteUserUsersIdDeleteErrors[keyof UsersDeleteUserUsersIdDeleteErrors];

export type UsersDeleteUserUsersIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type UsersDeleteUserUsersIdDeleteResponse = UsersDeleteUserUsersIdDeleteResponses[keyof UsersDeleteUserUsersIdDeleteResponses];

export type UsersUserUsersIdGetData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersUserUsersIdGetErrors = {
    /**
     * Missing token or inactive user.
     */
    401: unknown;
    /**
     * Not a superuser.
     */
    403: unknown;
    /**
     * The user does not exist.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUserUsersIdGetError = UsersUserUsersIdGetErrors[keyof UsersUserUsersIdGetErrors];

export type UsersUserUsersIdGetResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UsersUserUsersIdGetResponse = UsersUserUsersIdGetResponses[keyof UsersUserUsersIdGetResponses];

export type UsersPatchUserUsersIdPatchData = {
    body: UserUpdate;
    path: {
        /**
         * Id
         */
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersPatchUserUsersIdPatchErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Missing token or inactive user.
     */
    401: unknown;
    /**
     * Not a superuser.
     */
    403: unknown;
    /**
     * The user does not exist.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersPatchUserUsersIdPatchError = UsersPatchUserUsersIdPatchErrors[keyof UsersPatchUserUsersIdPatchErrors];

export type UsersPatchUserUsersIdPatchResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type UsersPatchUserUsersIdPatchResponse = UsersPatchUserUsersIdPatchResponses[keyof UsersPatchUserUsersIdPatchResponses];

export type ReadHeroesHeroesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/heroes/';
};

export type ReadHeroesHeroesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadHeroesHeroesGetError = ReadHeroesHeroesGetErrors[keyof ReadHeroesHeroesGetErrors];

export type ReadHeroesHeroesGetResponses = {
    /**
     * Response Read Heroes Heroes  Get
     * Successful Response
     */
    200: Array<HeroRead>;
};

export type ReadHeroesHeroesGetResponse = ReadHeroesHeroesGetResponses[keyof ReadHeroesHeroesGetResponses];

export type CreateHeroHeroesPostData = {
    body: HeroCreate;
    path?: never;
    query?: never;
    url: '/heroes/';
};

export type CreateHeroHeroesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateHeroHeroesPostError = CreateHeroHeroesPostErrors[keyof CreateHeroHeroesPostErrors];

export type CreateHeroHeroesPostResponses = {
    /**
     * Successful Response
     */
    200: HeroRead;
};

export type CreateHeroHeroesPostResponse = CreateHeroHeroesPostResponses[keyof CreateHeroHeroesPostResponses];

export type DeleteHeroHeroesHeroIdDeleteData = {
    body?: never;
    path: {
        /**
         * Hero Id
         */
        hero_id: number;
    };
    query?: never;
    url: '/heroes/{hero_id}';
};

export type DeleteHeroHeroesHeroIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteHeroHeroesHeroIdDeleteError = DeleteHeroHeroesHeroIdDeleteErrors[keyof DeleteHeroHeroesHeroIdDeleteErrors];

export type DeleteHeroHeroesHeroIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteHeroHeroesHeroIdDeleteResponse = DeleteHeroHeroesHeroIdDeleteResponses[keyof DeleteHeroHeroesHeroIdDeleteResponses];

export type ReadHeroHeroesHeroIdGetData = {
    body?: never;
    path: {
        /**
         * Hero Id
         */
        hero_id: number;
    };
    query?: never;
    url: '/heroes/{hero_id}';
};

export type ReadHeroHeroesHeroIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadHeroHeroesHeroIdGetError = ReadHeroHeroesHeroIdGetErrors[keyof ReadHeroHeroesHeroIdGetErrors];

export type ReadHeroHeroesHeroIdGetResponses = {
    /**
     * Successful Response
     */
    200: HeroRead;
};

export type ReadHeroHeroesHeroIdGetResponse = ReadHeroHeroesHeroIdGetResponses[keyof ReadHeroHeroesHeroIdGetResponses];

export type UpdateHeroHeroesHeroIdPatchData = {
    body: HeroUpdate;
    path: {
        /**
         * Hero Id
         */
        hero_id: number;
    };
    query?: never;
    url: '/heroes/{hero_id}';
};

export type UpdateHeroHeroesHeroIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateHeroHeroesHeroIdPatchError = UpdateHeroHeroesHeroIdPatchErrors[keyof UpdateHeroHeroesHeroIdPatchErrors];

export type UpdateHeroHeroesHeroIdPatchResponses = {
    /**
     * Successful Response
     */
    200: HeroRead;
};

export type UpdateHeroHeroesHeroIdPatchResponse = UpdateHeroHeroesHeroIdPatchResponses[keyof UpdateHeroHeroesHeroIdPatchResponses];

export type ReadRootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type ReadRootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseURL: `${string}://apps` | (string & {});
};